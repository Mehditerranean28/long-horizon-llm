
import type { CognitiveQueryAnalysisProtocol } from './cognitive-protocol';
import type { EvidenceSegment } from './index';
import type { Node, Edge } from 'reactflow';

export interface AnswerQuestionInput {
  question: string;
  conversationHistory?: string; // JSON string
  attachment?: { // Added for file uploads
    name: string;
    type: string;
    dataUri?: string; // For images, to be passed as data URI
  };
  tool?: string;
  tokenBudget?: number;
  timeBudgetSeconds?: number;
  protoBrainName?: string;
}

export interface AnswerQuestionOutput {
  answer: string; // JSON string of CognitiveQueryAnalysisProtocol
  mockEvidenceSegments?: EvidenceSegment[];
  queued?: boolean;
  correlationId?: string;
  /** Indicates the response was generated by the mock implementation */
  usingMock?: boolean;
}


export interface GenerateClarificationInput {
  cognitiveAnalysis: CognitiveQueryAnalysisProtocol;
  originalQuestion: string;
  tokenBudget?: number;
  timeBudgetSeconds?: number;
  protoBrainName?: string;
}

export interface GenerateClarificationOutput {
  clarificationText: string; // Markdown with understanding and questions
  mockEvidenceSegments?: EvidenceSegment[];
  queued?: boolean;
  usingMock?: boolean;
}

export interface DeepResearchInput {
  userClarification: string;
  originalQuestion: string;
  cognitiveAnalysis: CognitiveQueryAnalysisProtocol;
  conversationHistory?: string; // JSON string
  tokenBudget?: number;
  timeBudgetSeconds?: number;
  protoBrainName?: string;
}

export interface DeepResearchNodeData {
  label: string;
  details?: string;
  type?: 'objective' | 'query' | 'tactic' | 'dependency' | 'artifact' | 'step' | 'apiCall' | 'finding' | 'subPlan';
  id: string; 
  rawObjective?: import('./mission-plan').StrategyObjective;
  rawTactic?: import('./mission-plan').Tactic;
  rawQuery?: { id: string, description: string };
  dependencies?: string[];
  expectedArtifact?: string;
  tenant?: string[];
  color?: string; 
}

export interface DeepResearchOutput {
  summary: string;
  nodes: Node<DeepResearchNodeData>[];
  edges: Edge[];
  mockEvidenceSegments?: EvidenceSegment[];
  queued?: boolean;
  correlationId?: string;
  usingMock?: boolean;
}
